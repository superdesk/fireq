#!/bin/bash
# NOTE: This file is generated by script.
# Modify "tpl/*" and run "./fire gen-files"

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -exuo pipefail

export DEBIAN_FRONTEND=noninteractive
export DBUS_SESSION_BUS_ADDRESS=/dev/null

_activate() {
    set +ux
    . /opt/liveblog/env/bin/activate
    set -ux
}

_skip_install() {
    dpkg -l | grep '^ii.*'$1 && [ -z ${pkg_upgrade:-''} ]
}
### deploy
# write config if not exist
config=/etc/liveblog.sh
[ -f $config ] || cat <<EOF > $config
# put your variables here!
HOST=${HOST:-'localhost'}
HOST_SSL=${HOST_SSL:-''}

DB_HOST=${DB_HOST:-'localhost'}
DB_NAME=${DB_NAME:-'liveblog'}

SUPERDESK_TESTING=${SUPERDESK_TESTING:-''}
EOF

# env.sh
envfile=/opt/liveblog/env.sh
cat <<"EOF" > $envfile
# don't change this file
# variables are loading in /opt/liveblog/env/bin/activate by the next order
# 1. /etc/liveblog.sh
# 2. this file
# so rewrite you variables in /etc/liveblog.sh
LANG=en_US.UTF-8
LANGUAGE=en_US:en
LC_ALL=en_US.UTF-8
PYTHONIOENCODING="utf-8"
PYTHONUNBUFFERED=1

HOST=${HOST:-localhost}
DB_HOST=${DB_HOST:-localhost}
DB_NAME=${DB_NAME:-'liveblog'}
[ -n "${HOST_SSL:-}" ] && [ "$HOST" != 'localhost' ] && SSL='s' || SSL=''

# TODO: client related
SUPERDESK_WS_URL=${SUPERDESK_WS_URL:-"ws$SSL://$HOST/ws"}

# TODO: need to get rid this for proper SaaS
SUPERDESK_CLIENT_URL=${SUPERDESK_CLIENT_URL:-"http$SSL://$HOST"}

# To work properly inside and outside container, must be
# - "proxy_set_header Host <host>;" in nginx
# - the same "<host>" for next two settings
# TODO: try to fix at backend side, it should accept any host
SUPERDESK_URL=${SUPERDESK_URL:-"http$SSL://$HOST/api"}
CONTENTAPI_URL=${CONTENTAPI_URL:-"http$SSL://$HOST/contentapi"}


MONGO_URI=${MONGO_URI:-"mongodb://$DB_HOST/$DB_NAME"}
LEGAL_ARCHIVE_URI=${LEGAL_ARCHIVE_URI:-"mongodb://$DB_HOST/${DB_NAME}_la"}
ARCHIVED_URI=${ARCHIVED_URI:-"mongodb://$DB_HOST/${DB_NAME}_ar"}
ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-"http://$DB_HOST:9200"}
ELASTICSEARCH_INDEX=${ELASTICSEARCH_INDEX:-"$DB_NAME"}

CONTENTAPI_ELASTICSEARCH_INDEX=${CONTENTAPI_ELASTICSEARCH_INDEX:-"${DB_NAME}_ca"}
# TODO: fix will be in 1.6 release, keep it for a while
CONTENTAPI_ELASTIC_INDEX=$CONTENTAPI_ELASTICSEARCH_INDEX
CONTENTAPI_MONGO_URI=${CONTENTAPI_MONGO_URI:-"mongodb://$DB_HOST/${CONTENTAPI_ELASTICSEARCH_INDEX}"}

REDIS_URL=${REDIS_URL:-redis://$DB_HOST:6379/1}

C_FORCE_ROOT=1
CELERYBEAT_SCHEDULE_FILENAME=${CELERYBEAT_SCHEDULE_FILENAME:-/tmp/celerybeatschedule}
CELERY_BROKER_URL=${CELERY_BROKER_URL:-$REDIS_URL}

MAIL_FROM=${MAIL_FROM-''}
MAIL_SERVER=${MAIL_SERVER-localhost}
MAIL_PASSWORD=${MAIL_PASSWORD-''}
MAIL_PORT=${MAIL_PORT-25}
MAIL_USERNAME=${MAIL_USERNAME-''}
MAIL_USE_SSL=${MAIL_USE_SSL-False}
MAIL_USE_TLS=${MAIL_USE_TLS-False}

AMAZON_ACCESS_KEY_ID=${AMAZON_ACCESS_KEY_ID:-}
AMAZON_SECRET_ACCESS_KEY=${AMAZON_SECRET_ACCESS_KEY:-}
AMAZON_CONTAINER_NAME=${AMAZON_CONTAINER_NAME:-}
AMAZON_S3_SUBFOLDER=${AMAZON_S3_SUBFOLDER:-$(hostname)}
AMAZON_REGION=${AMAZON_REGION:-'eu-west-1'}
AMAZON_SERVER=${AMAZON_SERVER:-amazonaws.com}
AMAZON_SERVE_DIRECT_LINKS=${AMAZON_SERVE_DIRECT_LINKS:-True}
AMAZON_S3_USE_HTTPS=${AMAZON_S3_USE_HTTPS:-False}
AMAZON_PROXY_SERVER=${AMAZON_PROXY_SERVER:-}
AMAZON_URL_GENERATOR=${AMAZON_URL_GENERATOR:-default}

IFRAMELY_KEY=${IFRAMELY_KEY:-}
SENTRY_DSN=${SENTRY_DSN:-}
NEW_RELIC_APP_NAME=${NEW_RELIC_APP_NAME:-}
NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY:-}

if [ -n "${SUPERDESK_TESTING:-}" ]; then
    SUPERDESK_TESTING=True
    CELERY_ALWAYS_EAGER=True
    ELASTICSEARCH_BACKUPS_PATH=/tmp/es-backups
fi

### Liveblog custom
S3_THEMES_PREFIX=${S3_THEMES_PREFIX:-"/$(hostname)/"}
EMBEDLY_KEY=${EMBEDLY_KEY:-}
EOF

# load env.sh and config in activation script
activate=/opt/liveblog/env/bin/activate
grep "$envfile" $activate || cat <<EOF >> $activate
set -a
[ -f $config ] && . $config
. $envfile
set +a
EOF
unset envfile activate config
_activate

# prepare dist directory
_activate
dist_orig=/opt/liveblog/client/dist
dist=${dist_orig}-deploy
rm -rf $dist
cp -r $dist_orig $dist
sed -i \
    -e "s|<SUPERDESK_URL>|http$SSL://$HOST/api|" \
    -e "s|<SUPERDESK_WS_URL>|ws$SSL://$HOST/ws|" \
    -e "s|<IFRAMELY_KEY>|${IFRAMELY_KEY:-}|" \
    -e "s|<RAVEN_DSN>|${RAVEN_DSN:-}|" \
    -e "s|<PUBLISHER_API_DOMAIN>|${PUBLISHER_API_DOMAIN:-}|" \
    -e "s|<EMBEDLY_KEY>|${EMBEDLY_KEY:-}|" \
    -e "s|<SYNDICATION>|${SYNDICATION:-}|" \
    $dist/index.html
unset dist_orig dist


# nginx
if ! _skip_install nginx; then
    curl http://nginx.org/keys/nginx_signing.key | apt-key add -
    echo "deb http://nginx.org/packages/ubuntu/ xenial nginx" \
        > /etc/apt/sources.list.d/nginx.list

    apt-get -y update
    apt-get -y install nginx

    systemctl enable nginx
    systemctl restart nginx
fi

path=/etc/nginx/conf.d
cat <<"EOF" > $path/params.conf
tcp_nopush on;
tcp_nodelay on;
output_buffers 1 256k;
postpone_output 0;
keepalive_requests 210;
reset_timedout_connection on;
ignore_invalid_headers  on;
server_tokens off;
client_max_body_size 1024m;
recursive_error_pages   on;
server_name_in_redirect off;

gzip on;
gzip_disable "msie6";
gzip_vary on;
gzip_proxied any;
gzip_comp_level 1;
gzip_buffers 16 8k;
gzip_http_version 1.1;
gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript;

proxy_set_header Host $host;
proxy_set_header X-Forwarded-For $remote_addr;
proxy_set_header Accept-Encoding "";
proxy_buffering on;
proxy_ignore_client_abort off;
proxy_intercept_errors on;
proxy_next_upstream error timeout invalid_header;
proxy_redirect off;
proxy_buffer_size 32k;
proxy_buffers 8 32k;
proxy_busy_buffers_size 64k;
proxy_temp_file_write_size 64k;
client_body_buffer_size 128k;
proxy_connect_timeout 1;
proxy_send_timeout 300;
proxy_read_timeout 300;
proxy_cache_min_uses 1;
proxy_temp_path /var/tmp;
EOF

cat <<EOF > $path/default.conf
server {
    listen 80 default;

    location /ws {
        proxy_pass http://localhost:5100;
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_read_timeout 3600;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    location /api {
        proxy_pass http://localhost:5000;
        proxy_set_header Host $HOST;
        expires epoch;
    }


    location /.well-known {
        root /var/tmp;
    }

    location / {
        root /opt/liveblog/client/dist-deploy;
    }
}
EOF
unset path
nginx -s reload || systemctl restart nginx


# supervisor
if ! _skip_install supervisor; then
    apt-get -y install supervisor

    systemctl enable supervisor
    systemctl restart supervisor
    sleep 1
fi

[ -d /var/log/liveblog ] || mkdir -p /var/log/liveblog
cat <<"EOF" > /etc/supervisor/conf.d/liveblog.conf
[program:rest]
command=/bin/sh -c '. /opt/liveblog/env/bin/activate && exec gunicorn -b 0.0.0.0:5000 wsgi'
autostart=true
autorestart=true
stdout_logfile=/var/log/liveblog/rest.log
redirect_stderr=true
directory=/opt/liveblog/server

[program:wamp]
command=/bin/sh -c '. /opt/liveblog/env/bin/activate && exec python -u ws.py'
autostart=true
autorestart=true
stdout_logfile=/var/log/liveblog/wamp.log
redirect_stderr=true
directory=/opt/liveblog/server

[program:work]
command=/bin/sh -c '. /opt/liveblog/env/bin/activate && exec celery -A worker worker --loglevel=DEBUG'
autostart=true
autorestart=true
#user=nobody
#startsecs=10
#killasgroup=true
stdout_logfile=/var/log/liveblog/work.log
redirect_stderr=true
directory=/opt/liveblog/server

[program:beat]
command=/bin/sh -c '. /opt/liveblog/env/bin/activate && exec celery -A worker beat --loglevel=DEBUG --pid='
autostart=true
autorestart=true
#user=nobody
#startsecs=10
stdout_logfile=/var/log/liveblog/beat.log
redirect_stderr=true
directory=/opt/liveblog/server

EOF
supervisorctl update
supervisorctl restart all


### prepopulate
_activate
cd /opt/liveblog/server
if curl -sI $ELASTICSEARCH_URL/$ELASTICSEARCH_INDEX | grep -q 404; then
    python manage.py app:initialize_data

    # for master it should be '--admin=true' for devel just '--admin'
    python manage.py users:create --help | grep -- '-a ADMIN' && admin='--admin=true' || admin='--admin'
    python manage.py users:create -u admin -p admin -e 'admin@example.com' $admin

    python manage.py register_local_themes
else
    python manage.py app:initialize_data
    python manage.py register_local_themes
fi
